# -*- coding: utf-8 -*-
"""
Created on Mon Feb  1 05:17:47 2021

@author: Rohan
"""



### importing data from source
import os
import tarfile
from six.moves import urllib
DOWNLOAD_ROOT = "https://raw.githubusercontent.com/ageron/handson-ml2/master/"
HOUSING_PATH = os.path.join("datasets", "housing")
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"
def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path=housing_path)
    housing_tgz.close()

fetch_housing_data()

### reading data and exploring data overview
import pandas as pd
path=(r'C:\Users\Rohan\Desktop\data science\ineuron\practice group\datasets\housing')
housing=pd.read_csv( os.path.join(path, "housing.csv"))
housing.head()
housing.shape
housing.describe()
housing.info()
housing.columns
housing["ocean_proximity"].value_counts()

### plotting
import matplotlib.pyplot as plt
housing.hist(bins=50, figsize=(20,15))
plt.show()


### creating a test set function

### using scikit learns train split function
import numpy as np
from sklearn.model_selection import train_test_split
train_set, test_set=train_test_split(housing,test_size=0.2, random_state=800)

### creating test split by using Stratified sampling based on median income_category
housing['income_cat']=pd.cut(housing['median_income'],bins=[0,1.5, 3.0, 4.5, 6.,np.inf],labels=[1, 2, 3, 4, 5])
housing["income_cat"].hist()

from sklearn.model_selection import StratifiedShuffleSplit

split=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=800)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]
    
strat_test_set["income_cat"].value_counts() / len(strat_test_set)

for set_ in (strat_train_set, strat_test_set):
    set_.drop("income_cat", axis=1, inplace=True)

### Visualizing teh data
    
## Creating a copy of train set
housing = strat_train_set.copy()

housing.plot(kind='scatter',x='longitude', y='latitude',alpha=0.1,s=housing["population"]/100, label="population", figsize=(10,7),
c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True,)
plt.legend()


### Corelation
corr_matrix = housing.corr()
corr_matrix
corr_matrix["median_house_value"].sort_values(ascending=False)
from pandas.plotting import scatter_matrix
attributes = ["median_house_value", "median_income", "total_rooms",
"housing_median_age"]
scatter_matrix(housing[attributes], figsize=(12, 8))

housing["rooms_per_household"] = housing["total_rooms"]/housing["households"]
housing["bedrooms_per_room"] = housing["total_bedrooms"]/housing["total_rooms"]
housing["population_per_household"]=housing["population"]/housing["households"]





